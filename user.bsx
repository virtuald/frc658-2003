' TEAM658 2003 Code - Main control program (slot 1) ... PBasic2.5
'
'(C)2003 Dustin Spicuzza, Team658
'Portions (C)2002 Innovation First
'
' {$PBASIC 2.5}
' {$STAMP BS2SX}

'control varibles

p1_x 	VAR byte
p1_y 	VAR byte

oi_swA	VAR byte	'OI Digital Switch Inputs 1 thru 8
oi_swB	VAR byte	'OI Digital Switch Inputs 9 thru 16

sensor1	VAR byte	'RC Analog Input 1, connector pin 2

rc_swA	VAR byte	'RC Digital Inputs 1 thru 8
rc_swB	VAR byte	'RC Digital Inputs 9 thru 16

relayA	VAR byte
relayB	VAR byte

PB_mode	VAR byte

'========== DEFINE ALIASES ===================================================
'=============================================================================
'  Aliases are variables which are sub-divisions of variables defined
'  above.  Aliases don't require any additional RAM.


'---------- Aliases for each OI switch input ---------------------------------
'  Below are aliases for the digital inputs located on the Operator Interface.
'  Ports 1 & 3 have their inputs duplicated in ports 4 & 2 respectively.  The 
'  inputs from ports 1 & 3 may be disabled via the 'Disable' dip switch 
'  located on the Operator Interface.  See Users Manual for details.

p1_sw_trig	VAR oi_swA.bit0	'Joystick Trigger Button,	same as Port4 pin5 
p1_sw_top	VAR oi_swA.bit1	'Joystick Top Button,		same as Port4 pin8
p1_sw_aux1	VAR oi_swA.bit2	'Aux input,				same as Port4 pin9
p1_sw_aux2	VAR oi_swA.bit3	'Aux input,				same as Port4 pin15

p3_sw_trig	VAR oi_swA.bit4	'Joystick Trigger Button,	same as Port2 pin5 
p3_sw_top	VAR oi_swA.bit5	'Joystick Top Button,		same as Port2 pin8
p3_sw_aux1	VAR oi_swA.bit6	'Aux input,				same as Port2 pin9
p3_sw_aux2	VAR oi_swA.bit7	'Aux input,				same as Port2 pin15

p2_sw_trig	VAR oi_swB.bit0	'Joystick Trigger Button
p2_sw_top	VAR oi_swB.bit1	'Joystick Top Button
p2_sw_aux1	VAR oi_swB.bit2	'Aux input
p2_sw_aux2	VAR oi_swB.bit3	'Aux input

p4_sw_trig	VAR oi_swB.bit4	'Joystick Trigger Button
p4_sw_top	VAR oi_swB.bit5	'Joystick Top Button
p4_sw_aux1	VAR oi_swB.bit6	'Aux input
p4_sw_aux2	VAR oi_swB.bit7	'Aux input


'---------- Aliases for each RC switch input ---------------------------------
'  Below are aliases for the digital inputs located on the Robot Controller.

rc_sw1	VAR rc_swA.bit0
rc_sw2	VAR rc_swA.bit1
rc_sw3	VAR rc_swA.bit2
rc_sw4	VAR rc_swA.bit3
rc_sw5	VAR rc_swA.bit4
rc_sw6	VAR rc_swA.bit5
rc_sw7	VAR rc_swA.bit6
rc_sw8	VAR rc_swA.bit7
rc_sw9	VAR rc_swB.bit0
rc_sw10	VAR rc_swB.bit1
rc_sw11	VAR rc_swB.bit2
rc_sw12	VAR rc_swB.bit3
rc_sw13	VAR rc_swB.bit4
rc_sw14	VAR rc_swB.bit5
rc_sw15	VAR rc_swB.bit6
rc_sw16	VAR rc_swB.bit7


'---------- Aliases for each RC Relay outputs ---------------------------------
'  Below are aliases for the relay outputs located on the Robot Controller.

relay1_fwd	VAR RelayA.bit0
relay1_rev	VAR RelayA.bit1
relay2_fwd	VAR RelayA.bit2
relay2_rev	VAR RelayA.bit3
relay3_fwd	VAR RelayA.bit4
relay3_rev	VAR RelayA.bit5
relay4_fwd	VAR RelayA.bit6
relay4_rev	VAR RelayA.bit7

relay5_fwd	VAR RelayB.bit0
relay5_rev	VAR RelayB.bit1
relay6_fwd	VAR RelayB.bit2
relay6_rev	VAR RelayB.bit3
relay7_fwd	VAR RelayB.bit4

relay7_rev	VAR RelayB.bit5
relay8_fwd	VAR RelayB.bit6
relay8_rev	VAR RelayB.bit7

'*** temporary varibles
	tempvar1	VAR byte
	tempvar2	VAR byte
	tempvar3	VAR byte
	tempvar4	VAR byte


'*** auto program selection
	auto_selection 	VAR tempvar3
	auto_select	VAR auto_selection.nib0
	auto_bit1	VAR auto_selection.bit0
	auto_bit2	VAR auto_selection.bit1
	auto_bit3	VAR auto_selection.bit2
	auto_bit4	VAR auto_selection.bit3
	auto_l_wing	VAR auto_selection.bit4
	auto_r_wing	VAR auto_selection.bit5
	auto_inverse	VAR auto_selection.bit6
	
	auto_selection2	VAR tempvar4
	auto_delay	VAR auto_selection2.bit0
	auto_delay2	VAR auto_selection2.bit1

'*** suction cup flags
	suction_air	VAR byte
	air_on		CON 254
	air_off		CON 0

	suction_flags 	VAR tempvar1
	s_direction	VAR suction_flags.bit0
	s_timed 	VAR suction_flags.bit1
	r_suction_pos	VAR suction_flags.bit2
	f_suction_pos	VAR suction_flags.bit3
	r_ready 	VAR suction_flags.bit4
	f_ready		VAR suction_flags.bit5

'*** gyro
	gyro 		VAR sensor1

	'the low range is for going up ramp.. hi range for going down.. 

	gyro_lo 	CON 80		
	gyro_hi		CON 200

'*** system timer
	timer		VAR byte

'*** speed timer	
	left_hits	VAR tempvar1 
	right_hits	VAR tempvar2
	last_left	VAR tempvar3
	last_right	VAR tempvar4

'*** misc. system flags
	misc_flags	VAR byte
	last_time	VAR misc_flags.bit0
	no_user		VAR misc_flags.bit1
	ham_set 	VAR misc_flags.bit2
	
	misc_flags2	VAR byte
	spd_timer	VAR misc_flags2.nib0
	last_left_spd	VAR misc_flags2.bit4
	last_right_spd	VAR misc_flags2.bit5
	go_slow		VAR misc_flags2.bit6
	gear_abort 	VAR misc_flags2.bit7


	

' *** Our aliases for inputs..  
	right_line	VAR rc_sw1
	left_line	VAR rc_sw2
	center_line	VAR rc_sw3

'timer clock pulse
	timer_in	VAR rc_sw4

'wings
	right_out	VAR rc_sw5
	right_in	VAR rc_sw6
	left_out	VAR rc_sw7
	left_in		VAR rc_sw8

'suction cups
	front_up	VAR rc_sw9
	front_down	VAR rc_sw10
	front_middle	VAR rc_sw11
	rear_up		VAR rc_sw12
	rear_down	VAR rc_sw13
	rear_middle	VAR rc_sw14

'speed indicators.. 
	speed_right	VAR rc_sw15
	speed_left	VAR rc_sw16

'*** relays

'wings
	r_wing_out 	VAR relay3_fwd
	r_wing_in	VAR relay3_rev
	l_wing_out	VAR relay4_fwd
	l_wing_in	VAR relay4_rev

'*** motors	
'drive motors... 
	right_motor	VAR byte	
	left_motor	VAR byte	

'suction motors
	rear_suction	VAR byte
	front_suction	VAR byte

'*** controls
	auto_button	VAR p2_sw_top
	go_button	VAR p1_sw_trig
	stop_button	VAR p1_sw_top	

	l_wing_button	VAR p4_sw_top
	r_wing_button	VAR p4_sw_trig

	inverse_button	VAR p1_sw_aux1
	suction_button	VAR p4_sw_aux2
	active_button	VAR p1_sw_aux2
	learn_button	VAR p4_sw_aux1

	delay_button 	VAR p2_sw_trig
	delay_button2	VAR p2_sw_aux1

	auto_select2	VAR p3_sw_aux1
	auto_select1 	VAR p3_sw_top
	auto_select0	VAR p3_sw_trig



'---------- Aliases for the Pbasic Mode Byte (PB_mode) -------------------------------------------------------
'-------------------------------------------------------------------------------------------------------------
'  Bit 7 of the PB_mode byte (aliased as comp_mode below) indicates the status
'  of the Competition Control, either Enabled or Disabled.  This indicates the
'  starting and stopping of rounds at the competitions.
'  Comp_mode is indicated by a solid "Disabled" LED on the Operator Interface.
'  Comp_mode = 1 for Enabled, 0 for Disabled.
'
'  Bit 6 of the PB_mode byte (aliased as auton_mode below) indicates the status
'  of the Autonomous Mode, either Autonomous or Normal.  This indicates when
'  the robot must run on its own programming.  When in Autonomous Mode, all
'  OI analog inputs are set to 127 and all OI switch inputs are set to 0 (zero).
'  Auton_mode is indicated by a blinking "Disabled" LED on the Operator Interface.
'  Auton_mode = 1 for Autonomous, 0 for Normal.
'
'  Autonomous Mode can be turned ON by setting the RC to Team 0 (zero).
'
'  Bit 5 of the PB_mode byte (aliased as user_display_mode below) indicates when
'  the user selects the "User Mode" on the OI.  PB_mode.bit5 is set to 1 in "User Mode".
'  When the user selects channel, team number, or voltage, PB_mode.bit5 is set to 0
'  When in "User Mode", the eight Robot Feedback LED are turned OFF.
'  Note: "User Mode" is identified by the letter u in the left digit (for 4 digit OI's)
'  Note: "User Mode" is identified by decimal places on the right two digits (for 3 digit OI's)

comp_mode		VAR PB_mode.bit7
auton_mode		VAR PB_mode.bit6
user_display_mode	VAR PB_mode.bit5 


p1_x = 127		'Port 1, X-axis on Joystick

p1_y = 127		'Port 1, Y-axis on Joystick


'flags
	misc_flags = 0
	misc_flags2 = 0

'Motors
	right_motor = 127
	left_motor = 127
	rear_suction = 127
	front_suction = 127
'relays
	relayA = 0
	relayB = 0
	
'light
	relay8_fwd = 1

	out12 = 0
	out14 = 0
	out15 = 0

'========== DEFINE CONSTANTS (DO NOT CHANGE) =================================
'=============================================================================
' Baud rate for communications with User CPU
OUTBAUD	CON	20	' (62500, 8N1, Noninverted)
INBAUD	CON	20	' (62500, 8N1, Noninverted)

USERCPU		CON 4
FPIN		CON 1
COMA		CON 1
COMB		CON 2
COMC		CON 3


'========== MAIN LOOP ========================================================
'=============================================================================

MainLoop:


'---------- Serin Command - Get Data from Master uP --------------------------
'  Construct the "serin" command using the following rules:
'  1) There must be one variable for every input defined in the "Define Constants for Init" section.
'  2) The order must match the order in the EXAMPLE SERIN COMMAND below.
'  3) The total number of all variables may not exceed 26.
'  4) Only use one "Serin" command.
'  5) The Serin command must occupy one line.
'
'  If you see a BASIC INIT ERR on the Robot Controller after programming and pressing RESET, then
'  there is a problem with the Serin command below.  Check the number of variables.  A BASIC INIT ERR
'  will not occur if you have the variables in the wrong order, however your code will not work correctly.
'
'  EXAMPLE SERIN COMMAND
'  This example exceed the 26 variable limit and is not on one line:
'
'  Serin COMA\COMB, INBAUD, [oi_swA,oi_swB,rc_swA,rc_swB,p2_x,p1_x,p4_x,p3_x,PB_mode,packet_num,sensor1,
'				     sensor2,p2_y,p1_y,sensor3,sensor4,p4_y,p3_y,sensor5,sensor6,p2_wheel,p1_wheel,
'				     sensor7,sensor8,p4_wheel,p3_wheel,p2_aux,p1_aux,p4_aux,p3_aux,delta_t,res01]
'
   Serin COMA\COMB, INBAUD, [oi_swA,oi_swB,rc_swA,rc_swB,p1_x,PB_mode,sensor1,p1_y]


'Global code

	Toggle 7	'Basic Run LED on the RC is toggled ON/OFF every loop

' Timer code.. increments the system timer. 
' to reset timer.. set last_time = 0 and timer = 0
' The clock pulse goes high every 1/5 second, and we increment our timer every transition, 
' so our timer pulse should be every 1/10 second or so..  

	if timer_in <> last_time then
		timer = timer + 1
		spd_timer = spd_timer + 1
		last_time = timer_in
		'debug CLS,"timer =",DEC timer
	endif

	if active_button = 1 then
		auto_bit1 = auto_select0
		auto_bit2 = auto_select1
		auto_bit3 = auto_select2
		auto_l_wing = l_wing_button
		auto_r_wing = r_wing_button
		auto_inverse = inverse_button
		
		auto_delay = delay_button
		auto_delay2 = delay_button2

		put 10, auto_selection
		put 11, auto_selection2
	endif		
	

' speed tracking code:
'	Gives count of number of counter hits in last second.. not really used for anything actually anymore.. 
'	but we'll keep it anyways... 

	get 2, left_hits
	get 3, right_hits

	if spd_timer = 5 then	
		
	'	debug CLS,"left=",DEC left_hits,"  right=",DEC right_hits

		put 4, left_hits			'store last_left
		put 5, right_hits			'store last_right
		
		left_hits = 0
		right_hits = 0
		
		spd_timer = 0				'reset timer
	else
		if speed_left <> last_left_spd then
			left_hits = left_hits + 1	'increment left counter
			last_left_spd = speed_left
		endif

		if speed_right <> last_right_spd then	'increment right counter
			right_hits = right_hits + 1
			last_right_spd = speed_right
		endif
	endif	
	
   	put 2, left_hits
	put 3, right_hits

'This code automatically determines whether to automatically run or manually control 

if auto_button = 1 OR auton_mode = 1 then 
	
	get 10, auto_selection
	select (auto_select)
		case 0		'joy 1
			run 2
		case 1		'joy 2
			run 3
		case 2		'joy 3
			run 4
		case 3 		'joy 4
			run 5
		case 4 		'joy 5
			run 2
		case 5		'joy 6
			run 3
		case 6		
			'our hammond technique.. go straight forward for 10 seconds, then back up,
			'then go forward again.. hehe.. so very cool :-)

			if ham_set = 0 then
				ham_set = 1
				timer = 0
			else
				right_motor = 254
				left_motor = 254
				if timer >= 100 AND timer =< 115 then
					right_motor = 0
					left_motor = 0
				endif
			endif		
		case 7
			'do nothing... just in case :-)
	endselect	

else
	ham_set = 0			'reset hammond bit.. lol
	gosub operator_control
endif



'extend wings? 

	gosub wing_operations
		


'suction cups.. 

	if suction_button = 1 then
		out12 = 1			'suction cup light
		gosub suction_cups_down
	else
		out12 = 0
		gosub suction_cups_up
	endif
	
	if rear_up = 1 AND rear_down = 1 AND rear_middle = 0 then 
		rear_suction = 254
	endif

	if front_up = 1 AND front_down = 1 AND front_middle = 0 then
		front_suction = 254
	endif 



'========== OUTPUT DATA ======================================================
'=============================================================================
'  The Serout line sends data to the Output uP.  The Output uP passes this to each PWM 1-16
'  and Relay 1-8.  The Output uP will not output data if there is no communication with the
'  Operator Interface or if the Competition Mode is Disabled.  Do not delete any elements
'  from the Serout array.  Set unused PWM outputs to 127.  Set unused relay outputs to 0.
'
'  Serout USERCPU, OUTBAUD, [255,255,(PWM1),relayA,(PWM2),relayB,(PWM3),(PWM4),(PWM5),(PWM6),(PWM7),(PWM8),(PWM9),(PWM10),(PWM11),(PWM12),(PWM13),(PWM14),(PWM15),(PWM16)]

   Serout USERCPU, OUTBAUD, [255,255,right_motor,relayA,left_motor,relayB,front_suction,rear_suction,127,suction_air,127,127,127,127,127,127,127,127,127,127]

Goto MainLoop: 



'========== MANUAL CONTROL ===================================================
'=============================================================================

operator_control:


divi 	CON	4 
mult	CON	6
oc_offset  CON 	7

if p1_x > 112 AND p1_x < 144 then
	p1_x = 127
else
	if p1_x > 127 then 
		p1_x = p1_x - 127		'convert to 0-127
		p1_x = p1_x / divi		'down
		if p1_x < oc_offset then
			p1_x = 0
		else	
			p1_x = p1_x - oc_offset  		
		endif
		p1_x = p1_x * mult MAX 127	'up to 0-127
		p1_x = p1_x + 127		'convert to 127-254
	else
		p1_x = 127 - p1_x 		'convert to a number 0-112
		p1_x = p1_x / divi		'down 	
		if p1_x < oc_offset then
			p1_x = 0
		else	
			p1_x = p1_x - oc_offset  		
		endif
		p1_x = p1_x * mult MAX 127	'up to 0-127
		p1_x = 127 - p1_x		'convert back to 127-0
	endif
endif

if p1_y > 112 AND p1_y < 144 then
	p1_y = 127
else
	if p1_y > 127 then 
		p1_y = p1_y - 127		'convert to 0-127
		p1_y = p1_y / divi		'down
		if p1_y < oc_offset then
			p1_y = 0
		else	
			p1_y = p1_y - oc_offset  		
		endif
		p1_y = p1_y * mult MAX 127	'up to 0-127
		p1_y = p1_y + 127		'convert to 127-254
	else
		p1_y = 127 - p1_y 		'convert to a number 0-112
		p1_y = p1_y / divi		'down 
		if p1_y < oc_offset then
			p1_y = 0
		else	
			p1_y = p1_y - oc_offset  		
		endif
		p1_y = p1_y * mult MAX 127	'up to 0-127
		p1_y = 127 - p1_y		'convert back to 127-0
	endif
endif

if go_button = 1 then p1_y = 254


tank:
	if no_user = 0 AND stop_button = 0 then
		if go_slow = 1 then
			right_motor = (((2000 + p1_y + p1_x - 127) Min 2100 Max 2154) - 2000)		
			left_motor = (((2000 + p1_y - p1_x + 127) Min 2100 Max 2154) - 2000)		
		else
			right_motor = (((2000 + p1_y + p1_x - 127) Min 2000 Max 2254) - 2000)		
			left_motor = (((2000 + p1_y - p1_x + 127) Min 2000 Max 2254) - 2000)		
		endif
	else
		right_motor = 127
		left_motor = 127
	endif

	return

wing_operations:
	if r_wing_button = 1 then		'extend the right wing.. 
		if right_out = 0 then 
			r_wing_out = 1		
			r_wing_in = 0
		else				 
			r_wing_out = 0		
			r_wing_in = 0
		endif
	else
		if right_in = 0 then		'or retract it.. doesn't matter
			r_wing_out = 0
			r_wing_in = 1		
		else 
			r_wing_out = 0
			r_wing_in = 0		
		endif
	endif
	if l_wing_button = 1 then		'extend left wing
		if left_out = 0 then
			l_wing_out = 1		
			l_wing_in = 0
		else
			l_wing_out = 0		
			l_wing_in = 0
		endif
	else
		if left_in = 0 then		'or we can retract it too..  
			l_wing_out = 0
			l_wing_in = 1		
		else 
			l_wing_out = 0
			l_wing_in = 0		
		endif
	endif
	return

suction_cups_down:

	'rear/front_suction
	'rear/front_attach/release
	'rear/front_up/down/middle
	's_direction
	'r/f_suction_pos = 0 neutral 1 = set
	'r_set
	'l_set
	
	'going down.. 

	get 8,suction_flags
	if s_direction = 0 then
		if rear_down = 0 then
			rear_suction = 254	
			r_ready = 0
		else
			rear_suction = 127
			r_ready = 1
		endif

		if front_down = 0 then
			front_suction = 254
			f_ready = 0
		else
			front_suction = 127
			f_ready = 1
		endif
	else

	'going back up to the middle position... 	

		r_ready = 0
		f_ready = 0
		if rear_middle = 0 then
			'rear_suction = 0
		else
			rear_suction = 127
		endif
		if front_middle = 0 then
			'front_suction = 0
		else
			front_suction = 127
		endif
	endif

	'transition between going down and back up.. close valve here!	

	if r_ready = 1 AND f_ready = 1 then
		suction_air = air_on

		if s_timed = 0 then
			timer = 0
			s_timed = 1
		else
			if timer = 15 then
				s_direction = 1
				s_timed = 0
			endif
		endif
	endif
	
	put 8, suction_flags
	return


suction_cups_up:
	get 8, suction_flags

	suction_air = air_off
	if rear_up = 0 then
		rear_suction = 0	
	else
		s_direction = 0
		rear_suction = 127
	endif

	if front_up = 0 then
		front_suction = 0
	else
		s_direction = 0
		front_suction = 127
	endif

	put 8, suction_flags
	return

Stop



